2016182025 윤승규입니다.

프로그래밍이나 소프트웨어와 관련된 전공 지식이 출중하지는 않은 편이지만,
하드웨어 견적 및 조립이 취미이고, 컴퓨터 관해서는 여러 정보를 찾아가며 문제를 해결해본 경험이 조금은 있습니다.
그래서 점수로 치면 8점 정도, 컴퓨터를 어느정도는 잘 다룬다고 생각합니다.

프로그래밍 경험은 사실상 교내 전공 수업에서 실습 및 과제를 진행한 것이 거의 전부입니다.
전공 과목 수강을 하면서 C++ 언어를 주로 사용하였고,
교내 특강에서 파이썬을 약간 맛보기로 써본 적이 있습니다.

지난 2학년 1학기까지 수업을 들으며 스스로 부족함을 많이 느꼈습니다.
이번 방학 때 운좋게 전공 공부에 대한 동기부여를 얻을 수 있었는데,
이 수업을 실습 및 과제를 통해 프로그래밍 연습과 부가적인 전공 지식 축적의 기회로 삼고 싶습니다.

구조적 프로그래밍은 기능, 절차 중심인데 반해
객체지향 프로그래밍 객체, 관계 중심입니다.

비유적으로 설명한다면
클래스는 표현 대상에 대한 추상적인 설명이고,
오브젝트는 클래스의 실재하는 예시입니다.

객체지향 프로그래밍은 크게 네가지 핵심 개념이 있는데
데이터와 데이터에 따른 동작을 포함하고 있는 캡슐화,
계층을 따라 데이터와 동작 같은 특성을 공유하는 상속성,
다양한 형태의 동일한 명령을 사용할 수 있는 다형성,
메시지 전달 객체 간에 메시지를 주고받아 실행한다는 메시지 전달이 그것입니다.

비유적으로 설명한다면
캡슐화는 추상화 능력,
상속성은 분류하는 능력,
다형성은 같은 방법으로 다루기,
메시지 전달은 실존하는 객체들의 상호작용이라고 볼 수 있습니다.
객체지향은 사람의 추상능력, 인식방법에 가까운 개발 방법론으로
사람이 세계를 보고 이해하는 방법을 흉내낸 방법론이라고 이야기할 수 있습니다.

이 내용을 보며 1학년 2학기 C++프로그래밍 수업이 생각났습니다. 당시 수업을 통해
구조적 프로그래밍과 대비되는 절차지향 프로그래밍의 차이점과
절차지향 프로그래밍을 통해 할 수 있는 작업에 대해 어렴풋이 알 수 있었습니다.
그와 관련된 내용이 비유를 통해서 보기 좋게 정리되어 있어서 쉽게 다시 정리할 수 있었습니다.
전공 지식에 대해 이렇게 잘 설명할 수 있도록 공부를 열심히 해야겠다는 생각도 들었습니다.

cmd를 통해
사용자의 이름을 표시하고,
현재 디렉토리를 확인하고,
파일과 디렉토리 목록을 확인하고,
바탕화면 디렉토리에 가서 연습용 디렉토리를 만들었습니다.
그 후에 새로 만든 연습용 디렉토리에 새 디렉토리를 하나 더 만들고,
연습한 내용을 전부 지운 뒤 확인하고 커맨드 라인을 닫아서 실습을 마쳤습니다.

수업 내용을 전부 잘 기억하고 있진 않지만 ossw 수업에서 리눅스를 통해 터미널을 써본 경험이 있고,
가끔 컴퓨터에 문제가 있을 때 정보를 찾아서 cmd로 문제를 해결해본 경험이 있어서
커맨드 라인 방식의 숙련도는 점수로 치면 6점 정도, 어느정도는 다룰 줄 안다고 생각합니다.
