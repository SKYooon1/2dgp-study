git은 변경사항을 병합하는 이른바 버전관리를 위해서 사용되는 소프트웨어다.
이전에 만들어진 모든 변경사항의 스냅샷을 저장하기 때문에
팀 작업을 할 때 겹쳐써지거나 지워지는 것을 방지할 수 있고,
이전 시점의 어떤 버전으로도 되돌릴 수 있는 등 여러가지로 유용하게 쓰인다.

저장소를 만들어 작업물을 커밋하고
저장소 안에 여러 브랜치를 만들어 여러 버전으로 작업을 진행하거나
다른 브랜치의 내용을 현재 브랜치의 병합하고
필요하면 현재 브랜치의 옛날 버전으로 되돌리는 등
여러가지 작업을 통해서 작업물의 버전관리를 효율적으로 수행할 수 있다.

github와 같은 툴을 사용해 git을 조금 더 편리하게 이용할 수도 있다.

>>> 1+2
3
>>> 100-1
99
>>> 7*52
364
>>> 1024/8
128.0
>>> 1+2+3
6
>>> 1000-123
877
>>> 8 * 58
464
>>> 1024 // 8
128
>>> 1/2
0.5
>>> 1//2
0
>>> 4/3
1.3333333333333333
>>> 4//3
1
>>> 7%3
1
>>> 7.5%3
1.5
>>> 4%2.1
1.9
>>> 12 / -3
-4.0
>>> -123 // 5
-25
>>> 72 % -3
0
>>> 7 % -3
-2
>>> 7.5 % -3
-1.5
>>> 3.141592653589793*(3*3)
28.274333882308138
>>> 3.141592653589793*3**2
28.274333882308138
>>> 3.141592653589793*(9**2)
254.46900494077323
>>> 3.141592653589793*(20**2)
1256.6370614359173
>>> 3.141592653589793*(1.5**2)
7.0685834705770345
>>> 3.141592653589793*(4**4)
804.247719318987

단순 계산들이 굉장히 직관적이고 편해서 놀랐다.
수업 때는 계산기 같은 거 대신에 파이썬을 사용하는 사람도 있다고 했을 때 설마 했는데
직접 써보니 그럴 수도 있겠다는 생각도 들었다.

>>> pi=3.141592653589793
>>> pi*4**2
50.26548245743669
>>> pi*2.5**2
19.634954084936208
>>> pi*8**2
201.06192982974676
>>> print(pi)
3.141592653589793
>>> r=7
>>> area = pi * r ** 2
>>> print(area)
153.93804002589985
>>> r=11
>>> area = pi*r**2
>>> print(area)
380.132632
>>> name1 = "Trump"
>>> name2 = '강다니엘'
>>> print(name1)
Trump
>>> print(name2)
강다니엘
>>> order = 4
>>> pi = 3.141592
>>> name = "Trump"
>>> type(order)
<class 'int'>
>>> type(pi)
<class 'float'>
>>> type(name)
<class 'str'>
>>> 4 > 3
True
>>> 3.5 < -1.3
False
>>> 100 == 100
True
>>> 10 >= 10
True
>>> a = 365 > 366
>>> print(a)
False
>>> type(a)
<class 'bool'>

변수 선언과 활용도 간단하게 가능해서 편했다.
필요에 따라 자동으로 해주는만큼 프로그래밍하는 입장에서 편할 수는 있는데
세세하게 설정하는 자유가 없는 부분이 아쉬울 수 있다는 생각도 들었다.

>>> first = "Daehyun"
>>> last = "Lee"
>>> name = first + " " + last
>>> name
'Daehyun Lee'
>>> name * 2
'Daehyun LeeDaehyun Lee'
>>> name * 3
'Daehyun LeeDaehyun LeeDaehyun Lee'
>>> name[0]
'D'
>>> name[2]
'e'
>>> name[-1]
'e'
>>> name[-2]
'e'
>>> title = "Python 2D Game Programming"
>>> title[0:6]
'Python'
>>> title[7:9]
'2D'
>>> title[10:14]
'Game'
>>> title[:6]
'Python'
>>> title[-11:]
'Programming'
>>> title[::2]
'Pto DGm rgamn'
>>> title[::-1]
'gnimmargorP emaG D2 nohtyP'
>>> twice = ['momo', 'sana', 'zwi', 'nayun', 'dahyun']
>>> black_pink = ['jisu', 'jeni', 'rose', 'risa']
>>> twice
['momo', 'sana', 'zwi', 'nayun', 'dahyun']
>>> twice.append('jihyo')
>>> twice
['momo', 'sana', 'zwi', 'nayun', 'dahyun', 'jihyo']
>>> twice.sort()
>>> twice
['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi']
>>> len(twice)
6
>>> unite = twice + black_pink
>>> unite
['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']
>>> unite.remove('momo')
>>> unite
['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']
>>> unite[0]
'dahyun'
>>> unite[-1]
'risa'
>>> unite[:3]
['dahyun', 'jihyo', 'nayun']
>>> unite[-3:]
['jeni', 'rose', 'risa']
>>> score = { 'momo' : 80, 'zwi' : 85, 'sana' : 98 }
>>> type(score)
<class 'dict'>
>>> score['momo']
80
>>> score['nayun'
      ]
Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    score['nayun'
KeyError: 'nayun'
>>> score['nayun']=100
>>> score
{'momo': 80, 'zwi': 85, 'sana': 98, 'nayun': 100}
>>> del score['momo']
>>> score
{'zwi': 85, 'sana': 98, 'nayun': 100}
>>> score.keys()
dict_keys(['zwi', 'sana', 'nayun'])
>>> score.values()
dict_values([85, 98, 100])
>>> 'zwi' in score
True
>>> 'momo' in score
False
>>> score.clear()
>>> score
{}
>>> t1 = (1,2,3)
>>> t2 = (1, )
>>> t3 = ()
>>> t4 = 1,2,3,4
>>> t4
(1, 2, 3, 4)
>>> type(t4)
<class 'tuple'>
>>> t5 = (1, 'a', "park", (1,2))
>>> t1[1:]
(2, 3)
>>> t1+t5
(1, 2, 3, 1, 'a', 'park', (1, 2))
>>> t4*t4
Traceback (most recent call last):
  File "<pyshell#97>", line 1, in <module>
    t4*t4
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> t4*2
(1, 2, 3, 4, 1, 2, 3, 4)
>>> s1 = {1,2,3}
>>> type(s1)
<class 'set'>
>>> s1 = {1,2,2,4}
>>> s1
{1, 2, 4}
>>> l1 = [1,2,2,2,2,3,3,3,3,5,5,5,5,5,]
>>> s1 = set(l1)
>>> s1
{1, 2, 3, 5}
>>> s2 = {3,5,6,7}
>>> s1+s2
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    s1+s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1 | s2
{1, 2, 3, 5, 6, 7}
>>> s1 & s2
{3, 5}
>>> s2 - s1
{6, 7}
>>> s1 - s2
{1, 2}
>>> s1.add(8)
>>> s1
{1, 2, 3, 5, 8}
>>> s2.remove(6)
>>> s2
{3, 5, 7}

문자열을 간단하게 여러 방식으로 출력할 수 있는 것도 신기했다.
특히 step에 따라 출력하는 부분이 인상적이었다.
